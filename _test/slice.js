/* Generated by GoScript <github.com/kless/GoScript> */



function valueNil() {
	var s = new g.S([], 0, 0);


	var msg = "value";
	if (s.isNil()) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}

	msg = "length";
	if (s.len === 0) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}

	msg = "capacity";
	if (s.cap === 0) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}

}

function shortHand() {

	var array = []; for (var i=0; i<10; i++){ array[i]=0; } array = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];

	var a_slice = new g.S([], 0, 0), b_slice = new g.S([], 0, 0);

	var msg = "slicing";

	a_slice.set(array, 4, 8);

	if (a_slice.toString() === "efgh" && a_slice.len === 4 && a_slice.cap === 6) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}


	a_slice.set(array, 6, 7);

	if (a_slice.toString() === "g") {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}


	msg = "shorthand";

	a_slice.set(array, 0, 3);

	if (a_slice.toString() === "abc" && a_slice.len === 3 && a_slice.cap === 10) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}


	a_slice.set(array, 5);

	if (a_slice.toString() === "fghij") {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}


	a_slice.set(array, 0);

	if (a_slice.toString() === "abcdefghij") {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}


	msg = "slice of a slice";

	a_slice.set(array, 3, 7);

	if (a_slice.toString() === "defg" && a_slice.len === 4 && a_slice.cap === 7) {
		document.write("[OK] " + msg + "<br>");
	} else {
		document.write("[Error] " + msg + "<br>");
	}


	b_slice.set(a_slice, 1, 3);

	if (b_slice.toString() === "ef" && b_slice.len === 2 && b_slice.cap === 6) {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}


	b_slice.set(a_slice, 0, 3);

	if (b_slice.toString() === "def") {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}


	b_slice.set(a_slice, 0);

	if (b_slice.toString() === "defg") {
		document.write("[OK]<br>");
	} else {
		document.write("[Error]<br>");
	}

}




function Max(slice) {
	var max = slice[0];
	for (var index = 1; index < slice.length; index++) {
		if (slice[index] > max) {
			max = slice[index];
		}
	}
	return max;
}

function useFunc() {

	var A1 = []; for (var i=0; i<10; i++){ A1[i]=0; } A1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	var A2 = []; for (var i=0; i<4; i++){ A2[i]=0; } A2 = [1, 2, 3, 4];
	var A3 = []; for (var i=0; i<1; i++){ A3[i]=0; } A3 = [1];


	var slice = new g.S([], 0, 0);

	slice.set(A1, 0);

	if (Max(slice.f) === 9) {
		document.write("[OK] A1<br>");
	} else {
		document.write("[Error] A1<br>");
	}


	slice.set(A2, 0);

	if (Max(slice.f) === 4) {
		document.write("[OK] A2<br>");
	} else {
		document.write("[Error] A2<br>");
	}


	slice.set(A3, 0);

	if (Max(slice.f) === 1) {
		document.write("[OK] A3<br>");
	} else {
		document.write("[Error] A3<br>");
	}

}



function PrintByteSlice(name, slice) {
	var s = "" + name + " is : [";
	for (var index = 0; index < slice.len - 1; index++) {
		s += "" + slice.f[index] + ",";
	}
	s += "" + slice.f[slice.len - 1] + "]";

	document.write(s + "<br>");
}

function reference() {

	var A = []; for (var i=0; i<10; i++){ A[i]=0; } A = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];


	var slice1 = g.NewSlice(A, 3, 7);
	var slice2 = g.NewSlice(A, 5);
	var slice3 = g.NewSlice(slice1, 0, 2);


	document.write("=== First content of A and the slices<br>");
	PrintByteSlice("A", g.NewSlice(A, 0));
	PrintByteSlice("slice1", slice1);
	PrintByteSlice("slice2", slice2);
	PrintByteSlice("slice3", slice3);


	A[4] = 'E';
	document.write("<br>=== Content of A and the slices, after changing 'e' to 'E' in array A<br>");
	PrintByteSlice("A", g.NewSlice(A, 0));
	PrintByteSlice("slice1", slice1);
	PrintByteSlice("slice2", slice2);
	PrintByteSlice("slice3", slice3);


	slice2[1] = 'G';
	document.write("<br>=== Content of A and the slices, after changing 'g' to 'G' in slice2<br>");
	PrintByteSlice("A", g.NewSlice(A, 0));
	PrintByteSlice("slice1", slice1);
	PrintByteSlice("slice2", slice2);
	PrintByteSlice("slice3", slice3);
}



function resize() {
	var slice = new g.S([], 0, 0);


	slice = g.MakeSlice(0, 4, 5);

	if (slice.len === 4 && slice.cap === 5 && slice.f[0] === 0 && slice.f[1] === 0 && slice.f[2] === 0 && slice.f[3] === 0) {

		document.write("[OK] allocation<br>");
	} else {
		document.write("[Error] allocation<br>");
	}



	slice.f[1] = 2, slice.f[3] = 3;

	if (slice.f[0] === 0 && slice.f[1] === 2 && slice.f[2] === 0 && slice.f[3] === 3) {
		document.write("[OK] change<br>");
	} else {
		document.write("[Error] change<br>");
	}



	slice = g.MakeSlice(0, 2);

	if (slice.len === 2 && slice.cap === 2 && slice.f[0] === 0 && slice.f[1] === 0) {
		document.write("[OK] resize<br>");
	} else {
		document.write("[Error] resize<br>");
	}

}



function main() {
	document.write("<br>== valueNil<br>");
	valueNil();
	document.write("<br>== shortHand<br>");
	shortHand();
	document.write("<br>== useFunc<br>");
	useFunc();
	document.write("<br>== reference<br>");
	reference();
	document.write("<br>== resize<br>");
	resize();
} main();
