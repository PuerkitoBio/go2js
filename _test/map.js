/* Generated by GoScript <github.com/kless/GoScript> */



var rating = new g.M({"C": 5, "Go": 4.5, "Python": 4.5, "C++": 2}, 0);

function valueNil() {
	var n;


	var msg = "declaration";
	if (n === undefined) {
		console.log("[OK] " + msg + "\n");
	} else {
		alert("[Error] " + msg + "\n");
	}


	n = new g.M({}, 0);


	msg = "using make";
	if (n !== undefined) {
		console.log("[OK] " + msg + "\n");
	} else {
		alert("[Error] " + msg + "\n");
	}

}

function declare_1() {


	var numbers;
	numbers = new g.M({}, 0);

	numbers.f["one"] = 1;
	numbers.f["ten"] = 10;
	numbers.f["trois"] = 3;


	if (numbers.get("trois")[0] === 3) {
		console.log("[OK]\n");
	} else {
		alert("[Error] Trois is the french word for the number: " + numbers.get("trois")[0] + "\n");
	}

}

function declare_2() {

	var rating2 = new g.M({"C": 5, "Go": 4.5, "Python": 4.5, "C++": 2}, 0);


	var rating = new g.M({}, 0);
	rating.f["C"] = 5;
	rating.f["Go"] = 4.5;
	rating.f["Python"] = 4.5;
	rating.f["C++"] = 2;


	var code = "";
	if (JSON.stringify(rating.get("Go")[0]) === JSON.stringify(rating2.get("Go")[0])) {
		console.log("[OK] comparing same value\n");
	} else {
		alert("[Error] rating[\"Go\"]: " + rating.get("Go")[0] + "\trating2[\"Go\"]: " + rating2.get("Go")[0] + "\n");

	}


	rating.f["Go"] = 4.7;

	if (JSON.stringify(rating.get("Go")[0]) !== JSON.stringify(rating2.get("Go")[0])) {
		code = "OK";
	} else {
		code = "Error";
	}
	console.log("[" + code + "] comparing different value\n");

}

function reference() {

	var m = new g.M({}, "");
	m.f["Hello"] = "Bonjour";

	var m1 = m;
	m1.f["Hello"] = "Salut";


	if (JSON.stringify(m.get("Hello")[0]) === JSON.stringify(m1.get("Hello")[0])) {
		console.log("[OK]\n");
	} else {
		alert("[Error] value in key: " + m.get("Hello")[0] + "\n");
	}

}

function checkKey() {
	var csharp_rating = rating.get("C#")[0];

	if (csharp_rating === 0.00) {
		console.log("[OK] single key\n");
	} else {
		alert("[Error] value in key: " + csharp_rating + "\n");
	}


	var multMap = new g.M({1: {1: "one"}, 2: {2: "two"}}, "");
	var k_multMap = multMap.get(1, 2)[0];

	if (k_multMap === "") {
		console.log("[OK] multi-dimensional key\n");
	} else {
		alert("[Error] value in multi-dimensional key: " + k_multMap + "\n");
	}


	var _ = rating.get("C#"), csharp_rating2 = _[0], ok = _[1];

	if (ok) {
		alert("[Error] using comma\n");
	} else {
		console.log("[OK] using comma\n");
	}
	if (csharp_rating2 === 0.00) {
		console.log("[OK] value (using comma)\n");
	} else {
		alert("[Error] value in key (using comma): " + csharp_rating2 + "\n");
	}

}

function deleteKey() {
	delete rating.f["C++"];

	var ok = rating.get("C++")[1];

	if (ok) {
		alert("[Error]\n");
	} else {
		console.log("[OK]\n");
	}

}

function testRange() {
	var hasError = false;


	var value; for (key in rating.m) { value = rating.get(key)[0];
		switch (key) {
		case "C":
			if (value !== 5) {
			alert("[Error] key 'C': expected '5', got " + value + "\n");
			hasError = true;
		} break;
		case "Go":
			if (value !== 4.5) {
			alert("[Error] key 'Go': expected '4.5', got " + value + "\n");
			hasError = true;
		} break;
		case "Python":
			if (value !== 4.5) {
			alert("[Error] key 'Python': expected '4.5', got " + value + "\n");
			hasError = true;
		} break;
		default:
			alert("[Error] key not expected: " + key + "\n");
			hasError = true;
		}
	}
	if (!hasError) {
		console.log("[OK]\n");
	}


	for (key in rating.m) {
		if (key !== "C" && key !== "Go" && key !== "Python") {
			alert("[Error] key not expected: " + key + "\n");
			hasError = true;
		}
	}
	if (!hasError) {
		console.log("[OK] omitting value\n");
	}
}

function blankIdentifierInRange() {
	var hasError = false;


	var Max = function(slice) {
		var max = slice[0];
		var value; for (_ in slice) { value = slice[_];
			if (value > max) {
				max = value;
			}
		}
		return max;
	};


	var A1 = []; for (var i=0; i<10; i++){ A1[i]=0; } A1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	var A2 = []; for (var i=0; i<4; i++){ A2[i]=0; } A2 = [1, 2, 3, 4];
	var A3 = []; for (var i=0; i<1; i++){ A3[i]=0; } A3 = [1];


	var slice = new g.S();

	slice = A1.slice(0);
	if (Max(slice.f) !== 9) {
		alert("[Error] 'A1': value expected '9', got " + Max(slice.f) + "\n");
		hasError = true;
	}
	slice = A2.slice(0);
	if (Max(slice.f) !== 4) {
		alert("[Error] 'A2': value expected '4', got " + Max(slice.f) + "\n");
		hasError = true;
	}
	slice = A3.slice(0);
	if (Max(slice.f) !== 1) {
		alert("[Error] 'A3': value expected '1', got " + Max(slice.f) + "\n");
		hasError = true;
	}

	if (!hasError) {
		console.log("[OK]\n");
	}
}

function main() {
	console.log("\n== valueNil\n");
	valueNil();
	console.log("\n== declare_1\n");
	declare_1();
	console.log("\n== declare_2\n");
	declare_2();
	console.log("\n== reference\n");
	reference();
	console.log("\n== checkKey\n");
	checkKey();
	console.log("\n== deleteKey\n");
	deleteKey();
	console.log("\n== testRange\n");
	testRange();
	console.log("\n== blankIdentifierInRange\n");
	blankIdentifierInRange();
}
