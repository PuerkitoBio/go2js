/* Generated by GoScript <github.com/kless/GoScript> */















var g = {}; (function() {


const 
invalid = 0,
arrayKind = 1,
sliceKind = 2;


(function() {


	if (!Array.isArray) {
		Array.isArray = function(arg) {
			return Object.prototype.toString.call(arg) === "[object Array]";
		};
	}
}());







function arrayType(f, len, cap) {
	this.f=f;

	this.len=len;
	this.cap=cap;

}




function MakeArray(dim, zero, elem) {
	var a = new arrayType([], 0, 0);

	if (elem !== undefined) {
		if (!equalDim(dim, getDimArray(elem))) {
			a.f = initArray(dim, zero);
			mergeArray(a.f, elem);
		} else {
			a.f = elem;
		}
	} else {
		a.f = initArray(dim, zero);
	}

	a.len = dim[0];
	a.cap = a.len;
	return a;
}

arrayType.prototype.kind = function() { return arrayKind; }


function mergeArray(dst, src) {
	var v; for (var i in src) { v = src[i];
		if (Array.isArray(v)) {
			mergeArray(dst[i], v);
		} else {
			dst[i] = v;
		}
	}
}



function equalDim(d1, d2) {
	if (d1.length !== d2.length) {
		return false;
	}
	var v; for (var i in d1) { v = d1[i];
		if (JSON.stringify(v) !== JSON.stringify(d2[i])) {
			return false;
		}
	}
	return true;
}



function getDimArray(a) { var dim = [];
	for (;;) {
		dim.push(a.length);

		if (Array.isArray(a[0])) {
			a = a[0];
		} else {
			break;
		}
	}
	return dim;
}


function initArray(dim, zero) { var a = [];
	if (dim.length === 0) {
		return zero;
	}
	var nextArray = initArray(dim.slice(1), zero);

	for (var i = 0; i < dim[0]; i++) {
		a[i] = nextArray;
	}
	return a;
}





















function sliceType(array, elem, low, high, len, cap, isNil) {
	this.array=array;
	this.elem=elem;

	this.low=low;
	this.high=high;
	this.len=len;
	this.cap=cap;

	this.isNil=isNil;
}



function NilSlice() {
	var s = new sliceType(undefined, [], 0, 0, 0, 0, false);
	s.isNil = true;
	s.len = 0, s.cap = 0;
	return s;
}


function MakeSlice(zero, len, cap) {
	var s = new sliceType(undefined, [], 0, 0, 0, 0, false);
	s.len = len;

	for (var i = 0; i < len; i++) {
		s.elem[i] = zero;
	}

	if (cap !== undefined) {
		s.cap = cap;
	} else {
		s.cap = len;
	}

	return s;
}


function NewSlice(elem) {
	var s = new sliceType(undefined, [], 0, 0, 0, 0, false);

	s.elem = elem;
	s.len = elem.length;
	s.cap = s.len;
	return s;
}


function NewSliceFrom(a, low, high) {
	var s = new sliceType(undefined, [], 0, 0, 0, 0, false);

	s.array = a;
	s.low = low;
	s.high = high;
	s.len = high - low;
	s.cap = a.cap - low;
	return s;
}




sliceType.prototype.set = function(i, low, high) {
	this.low = low, this.high = high;

	if (i.elem !== undefined) {
		this.elem = i.elem.slice(low, high);
		this.cap = i.cap - low;
		this.len = this.elem.length;

	} else {
		this.array = i;
		this.cap = i.length - low;
		this.len = high - low;
	}
}


sliceType.prototype.get = function() {
	if (this.elem.length !== 0) {
		return this.elem;
	}

	return this.array.slice(this.low, this.high);
}


sliceType.prototype.str = function() {
	var _s = this.get();
	return _s.join("");
}






























function Map(f, zero) {
	this.f=f;
	this.zero=zero;

}




Map.prototype.get = function(k) {
	var v = this.f;


	for (var i = 0; i < arguments.length; i++) {
		v = v[arguments[i]];
	}

	if (v === undefined) {
		return [this.zero, false];
	}
	return [v, true];
}
















function Export(pkg, exported) {
	var v; for (var _ in exported) { v = exported[_];
		pkg.v = v;
	}
}

g.MakeArray = MakeArray;
g.NilSlice = NilSlice;
g.MakeSlice = MakeSlice;
g.NewSlice = NewSlice;
g.NewSliceFrom = NewSliceFrom;
g.Map = Map;
g.Export = Export;

})();
